use Mix.Config

config :logger, :file_log, formatter: LoggerFileBackendWithFormattersStackdriver
config :tai, send_orders: true

config :tai,
  advisor_groups: %{
    create_and_cancel_pending_order: [
      advisor: Examples.CreateAndCancelPendingOrder.Advisor,
      factory: Tai.Advisors.Factories.OnePerProduct,
      products: "gdax.btc_usd"
    ],
    log_spread: [
      advisor: Examples.LogSpread.Advisor,
      factory: Tai.Advisors.Factories.OnePerProduct,
      products: "binance.btc_usdt gdax.btc_usd"
    ],
    fill_or_kill_orders: [
      advisor: Examples.FillOrKillOrders.Advisor,
      factory: Tai.Advisors.Factories.OnePerProduct,
      products: "binance.btc_usdt"
    ]
  }

config :tai,
  venues: %{
    bitmex: [
      enabled: true,
      adapter: Tai.VenueAdapters.Bitmex,
      products: "xbth19 xbtm19",
      credentials: %{
        main: %{
          api_key: {:system_file, "BITMEX_API_KEY"},
          api_secret: {:system_file, "BITMEX_SECRET"}
        }
      },
      opts: %{
        autocancel: %{ping_interval_ms: 15_000, cancel_after_ms: 60_000}
      },
      timeout: 60_000
    ],
    binance: [
      enabled: true,
      adapter: Tai.VenueAdapters.Binance,
      products: "btc_usdt ltc_usdt eth_usdt",
      credentials: %{
        main: %{
          api_key: {:system_file, "BINANCE_API_KEY"},
          secret_key: {:system_file, "BINANCE_API_SECRET"}
        }
      }
    ],
    gdax: [
      enabled: true,
      adapter: Tai.VenueAdapters.Gdax,
      products: "btc_usd ltc_usd eth_usd",
      credentials: %{
        main: %{
          api_url: "https://api.pro.coinbase.com",
          api_key: {:system_file, "GDAX_API_KEY"},
          api_secret: {:system_file, "GDAX_API_SECRET"},
          api_passphrase: {:system_file, "GDAX_API_PASSPHRASE"}
        }
      }
    ]
  }
